package ${package.Controller};

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.java2e.martin.common.bean.system.MultiDelete;
import com.java2e.martin.common.core.api.R;
import com.java2e.martin.common.log.annotation.MartinLog;
import io.swagger.annotations.ApiOperation;


import com.baomidou.mybatisplus.core.metadata.IPage;
#if($cfg.moduleName=='system')
import com.java2e.martin.common.bean.${cfg.moduleName}.$!{entity};
#else
import $!{package.Entity}.$!{entity};
#end
import $!{package.Service}.$!{table.serviceName};
import com.java2e.martin.common.core.api.R;
import com.java2e.martin.common.log.annotation.MartinLog;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiParam;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import org.springframework.web.bind.annotation.RequestParam;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end

import javax.validation.Valid;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;


#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 路由
 * </p>
 *
 * @author ${author}
 * @version 1.0
 * @date ${date}
 * @describtion
 * @since 1.0
 */
@Slf4j
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping
#set($str=$!table.serviceName)
#set($servicename=$!str.substring(0,1).toLowerCase()+$!str.substring(1))
#set($entityname=$!entity.substring(0,1).toLowerCase()+$!entity.substring(1))
#if("$entityname"=="log")
    #set($entityname="logger")
#end
#if("$entityname"=="page")
    #set($entityname="pages")
#end
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName}{
#end

    @Autowired
    private $!{table.serviceName} $!servicename;

    @ApiOperation(value = "$!{table.comment}", nickname = "create", notes = "新增$!{table.comment}", tags = {"$!{entityname}",})
    @RequestMapping(value = "/$!{entityname}", method = RequestMethod.POST)
    @MartinLog("添加$!{table.comment}")
    public R create(@ApiParam(value = "", required = true) @Valid @RequestBody $!{entity} $!{entityname}) {
        return R.ok($!{servicename}.save($!{entityname}));
    }

    @ApiOperation(value = "$!{table.comment}", nickname = "delete", notes = "删除$!{table.comment}", tags = {"$!{entityname}",})
    @RequestMapping(value = "/$!{entityname}/{id}", method = RequestMethod.DELETE)
    @MartinLog("删除$!{table.comment}")
    public R delete(@ApiParam(value = "Id", required = true) @PathVariable("id") String id) {
        return R.ok($!{servicename}.removeById(id));
    }

    @ApiOperation(value = "$!{table.comment}", nickname = "list", notes = "分页查询$!{table.comment}", tags = {"$!{entityname}",})
    @RequestMapping(value = "/$!{entityname}", method = RequestMethod.GET)
    @MartinLog("分页查询$!{table.comment}")
    @SneakyThrows
    public R list(@RequestParam Map<String,Object> map) {
        return R.ok($!{servicename}.getPage(map));
    }

    @ApiOperation(value = "$!{table.comment}", nickname = "multipleDelete", notes = "批量删除$!{table.comment}", tags = {"$!{entityname}",})
    @RequestMapping(value = "/$!{entityname}/multiple_delete", method = RequestMethod.DELETE)
    @MartinLog("批量删除$!{table.comment}")
    public R multipleDelete(@ApiParam(value = "", required = true) @Valid @RequestBody MultiDelete $!{entityname}) {
        return R.ok($!{servicename}.removeByIds($!{entityname}.getKeys()));
    }

    @ApiOperation(value = "$!{table.comment}", nickname = "partialUpdate", notes = "编辑$!{table.comment}", tags = {"$!{entityname}",})
    @RequestMapping(value = "/$!{entityname}/{id}", method = RequestMethod.PATCH)
    @MartinLog("编辑$!{table.comment}")
    public R partialUpdate(@ApiParam(value = "Id", required = true) @PathVariable("id") String id, @ApiParam(value = "", required = true) @Valid @RequestBody $!{entity} $!{entityname}) {
        return R.ok($!{servicename}.updateById($!{entityname}));
    }

    @ApiOperation(value = "$!{table.comment}", nickname = "read", notes = "获取单个$!{table.comment}", tags = {"$!{entityname}",})
    @RequestMapping(value = "/$!{entityname}/{id}", method = RequestMethod.GET)
    @MartinLog("获取单个$!{table.comment}")
    public R read(@ApiParam(value = "Id", required = true) @PathVariable("id") String id) {
        return R.ok($!{servicename}.getById(id));
    }

    @ApiOperation(value = "$!{table.comment}", nickname = "tree", notes = "获取$!{table.comment}树", tags = {"$!{entityname}",})
    @RequestMapping(value = "/$!{entityname}/tree", method = RequestMethod.GET)
    @MartinLog("获取$!{table.comment}树")
    public R tree(@ApiParam(value = "", required = true) $!{entity} $!{entityname}) {
        return R.ok($!{servicename}.tree($!{entityname}));
    }

    @ApiOperation(value = "$!{table.comment}", nickname = "update", notes = "修改$!{table.comment}", tags = {"$!{entityname}",})
    @RequestMapping(value = "/$!{entityname}/{id}", method = RequestMethod.PUT)
    @MartinLog("编辑$!{table.comment}")
    public R update(@ApiParam(value = "Id", required = true) @PathVariable("id")  String id,  @ApiParam(value = "", required = true) @Valid @RequestBody  $!{entity} $!{entityname}) {
        LambdaQueryWrapper<$!{entity}> wrapper = new LambdaQueryWrapper<>();
        wrapper.eq($!{entity}::getId, id);
        return R.ok($!{servicename}.update($!{entityname},wrapper));
    }
}

#end
